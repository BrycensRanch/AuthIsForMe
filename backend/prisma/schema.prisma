// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
}

model Following {
  // not really a meaningful value
  followId Int     @id @default(autoincrement())
  userId   Int
  User     Profile @relation(fields: [userId], references: [profileId])
}

// User model includes sensitive information about the user
// Should not be exposed to the public
model User {
  /// Triple Slash Comment: It will show up in JSON schema [EMAIL]
  email          String          @unique
  userId         Int             @id @unique @default(autoincrement())
  // The user Model derives a Profile model for non sensitive information
  // Define a one-to-one relationship with the Profile model
  profile        Profile?        @relation(fields: [profileId], references: [profileId])
  profileId      Int?
  apiKeys        ApiKey[]
  mojangAccount  MojangAccount?
  DiscordAccount DiscordAccount?

  TwitchAccount TwitchAccount?
}

// Should not include sensitive information
model Profile {
  profileId      Int      @id @default(autoincrement())
  // Double Slash Comment: It will NOT show up in JSON schema
  createdAt      DateTime @default(now())
  banned         Boolean  @default(false)
  profilePrivate Boolean  @default(false)
  profileViews   Int      @default(0)
  lastSeen       DateTime @default(now())
  avatar         String?
  // following  User[]   @relation("Following")
  // followedBy User[]   @relation("Followers")

  /// Username 
  username  String      @unique
  role      Role        @default(USER)
  posts     Post[]
  biography String?     @db.VarChar(240)
  Following Following[]
  User      User[]
}

model MojangAccount {
  uuid             String @id @unique
  username         String @unique
  user             User   @relation(fields: [userId], references: [userId])
  userId           Int    @unique
  accessTokenHash  String @unique
  refreshtokenHash String @unique
}

model DiscordAccount {
  userId           Int    @id @unique
  user             User   @relation(fields: [userId], references: [userId])
  accessTokenHash  String @unique
  refreshtokenHash String @unique
}

model TwitchAccount {
  userId           Int    @id @unique
  user             User   @relation(fields: [userId], references: [userId])
  accessTokenHash  String @unique
  refreshtokenHash String @unique
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  title     String
  content   String?
  published Boolean? @default(false)
  viewCount Int      @default(0)
  author    Profile? @relation(fields: [authorId], references: [profileId])
  authorId  Int?
}

enum Role {
  USER
  MODERATOR
  ADMIN
  OWNER
}

enum ApiKeyType {
  FREE
  HOBBY
  BUSINESS
}

model Session {
  id        BigInt   @id @default(autoincrement()) @db.BigInt
  sid       String   @unique
  expires   DateTime
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ApiKey {
  id         Int        @id @default(autoincrement())
  /// memorable name for api key 
  name       String     @db.VarChar(60)
  /// there are different types of api keys for rate limiting and other purposes
  type       ApiKeyType @default(FREE)
  key        String     @unique
  owner      User       @relation(references: [userId], fields: [userId])
  createdAt  DateTime   @default(now())
  validUntil DateTime
  userId     Int
}
